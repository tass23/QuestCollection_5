<?xml version="1.0"?>
<library>
  <!--
  If you are viewing this on GitHub and want to download it, right click on the RAW button
  just above, and select "Save link as..."
  -->

  <!--
  QuestLib v1.0
  
  Quest version: 5.7
  Written by: The Pixie, 2017

  Tutorial and notes here:
  https://github.com/ThePix/quest/wiki/Quest-Library
  
  
  A quest has a state, "Active", "Failed", "Successful" (can be implicitly "Inactive")
  and a status, a string proved by the creator.
  -->

  <command>
    <pattern>quest #object#</pattern>
    <scope>quests</scope>
    <script>
      if (GetObject("quests") = null) {
        create ("quests")
      }
      if (not object.parent = quests) {
        msg("That's not a quest.")
      }
      
      msg ("Quest: {i:" + GetDisplayAlias(object) + "}")
      foreach (s, object.history) {
        msg (Spaces(4) + s)
      }
      msg (Spaces(4) + object.status)
      msg (" ")
    </script>
  </command>
  
  <command>
    <pattern>quests;q;current quests;cq</pattern>
    <script>
      msg ("Active Quests:")
      QuestReport ("Active")
    </script>
  </command>
  
  <command>
    <pattern>successes;successful quests;sq</pattern>
    <script>
      msg ("Completed Quests:")
      QuestReport ("Successful")
    </script>
  </command>
  
  <command>
    <pattern>fails;failures;failed quests;fq</pattern>
    <script>
      msg ("Failed Quests:")
      QuestReport ("Failed")
    </script>
  </command>

  <function name="QuestReport" parameters="state">
    if (GetObject("quests") = null) {
      create ("quests")
    }
    flag = true
    foreach (o, FilterByAttribute(GetDirectChildren(quests), "state", state)) {
      msg (QuestSummary(o))
      flag = false
    }
    if (flag) {
      msg (Spaces(4) + "None")
    }
    firsttime {
      msg (" ")
      msg ("[Type SUCCESSFUL QUESTS or SQ to see a list of successfully completed quests]")
      msg ("[Type FAILED QUESTS or FQ for a list of failed quests]")
    }
    msg (" ")
  </function>

  <function name="Quest" parameters="obj, s, state">
    if (GetObject("quests") = null) {
      create ("quests")
    }
    obj.parent = quests
    if (not HasAttribute(obj, "history")) {
      obj.history = NewStringList()
    }
    if (not obj.status = s) {
      if (state = "Success") {
        msg ("Quest completed: {i:" + obj.alias + "}")
        obj.state = "Completed"
      }
      else if (state = "Failed") {
        msg ("Quest failed: {i:" + obj.alias + "}")
        obj.state = "Failed"
      }
      else if (state = "Start") {
        msg ("Quest started: {i:" + obj.alias + "}")
        obj.state = "Active"
      }
      else {
        msg ("Quest updated: {i:" + obj.alias + "}")
        obj.state = "Active"
      }
    }
    if (HasString(obj, "status")) {
      list add (obj.history, "{s:" + obj.status + "}")
    }
    obj.status = s
  </function>
  
  <function name="QuestSummary" parameters="obj" type="string">
    return (Spaces(4) + "{i:" + obj.alias + " -}" + Spaces(1) + obj.status)
  </function>
  
  <function name="QuestNext" parameters="obj, s">
    Quest (obj, s, "Next")
  </function>
  
  <function name="QuestEnd" parameters="obj, s">
    Quest (obj, s, "Success")
  </function>
  
  <function name="QuestFail" parameters="obj, s">
    Quest (obj, s, "Failed")
  </function>
  
  <function name="QuestStart" parameters="obj, s">
    Quest (obj, s, "Start")
  </function>
  
  <function name="QuestState" parameters="quest" type="string">
    if (GetObject("quests") = null) {
      create ("quests")
    }
    if (not quest.parent = quests) {
      return ("Inactive")
    }
    else {
      return (quest.state)
    }
  </function>
  <function name="showHint" parameters="object"><![CDATA[
    if (HasAttribute(object, "hintlist")) {
      game.this = object
      optNo = 0
      choices = NewStringList()
      game.hintmenulist = object.hintlist
      foreach (h, object.hintlist) {
        optNo = optNo + 1
        opt = optNo + ": " + h
        list add (choices, "Hint " + optNo)
      }
      if ((ListCount(choices)) > 1) {
        hint = "Hints"
      }
      else {
        hint = "Hint"
      }
      ShowHintMenu ("<br>" + hint + " for " + GetDisplayName(game.this) + ":", choices, true) {
        r = Split(result, " ")
        thehint = ListItem(r, 1)
        thehint = ToInt(thehint)
        thehint = thehint -1
        msg (ListItem(game.this.hintlist, thehint))
        if (thehint +1 < (ListCount(game.this.hintlist))) {
          // msg ("RERUN MENU")
          // msg (game.this)
          HandleSingleCommand ("hint " + game.this.alias + "")
        }
      }
    }
    else {
      msg ("There are no hints set up for this item.")
    }
  ]]></function>
  <function name="addHint" parameters="object, string">
    if (not HasAttribute(object, "hintlist")) {
      object.hintlist = NewStringList()
    }
    hn = (ListCount(object.hintlist)) + 1
    string = "Hint " + hn + ": " + string
    list add (object.hintlist, string)
  </function>
  <function name="HandleHintClick" parameters="s"><![CDATA[
    // msg (game.this)
    // msg (s)
    game.hintOptNo = s
    s = ToInt(s) - 1
    ClearMenu
    msg (game.caption)
    msg (ListItem(game.this.hintlist, s))
    if (ListCount(game.this.hintlist) > s + 1) {
      do (game.this, "hint")
    }
    JS.scrollToEnd ()
  ]]></function>
  <function name="ShowHintMenu" parameters="caption, options, allowCancel, callback"><![CDATA[
    outputsection = StartNewOutputSection()
    msg (caption)
    count = 0
    game.menuoptionskeys = NewStringList()
    foreach (option, options) {
      list add (game.menuoptionskeys, option)
      count = count + 1
      if (TypeOf(options) = "stringlist") {
        optionText = option
      }
      else {
        optionText = StringDictionaryItem(options, option)
      }
      msg ("<button class=\"cmdlink\" style=\"background:#296231;color:#fac4ff;padding:4px;margin:6px\" onclick=\"ASLEvent('ShowMenuResponse','" + option + "')\">" + optionText + "</button>")
    }
    game.menuopt = option
    EndOutputSection (outputsection)
    game.menuoptions = options
    game.menuallowcancel = allowCancel
    game.menucallback = callback
    game.menuoutputsection = outputsection
  ]]></function>
</library>