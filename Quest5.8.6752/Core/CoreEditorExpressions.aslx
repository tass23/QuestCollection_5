<library>

  <implied element="editor" property="pattern" type="simplepattern"/>
  
  <!-- Templates for "if" -->

  <editor>
    <pattern>Got(#object#)</pattern>
    <create>Got()</create>
    <description>[EditorExpressionsplayeriscarrying]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>
  </editor>

  <editor>
    <pattern>not Got(#object#)</pattern>
    <create>not Got()</create>
    <description>[EditorExpressionsplayerisnotcarrying]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>
  </editor>

  <editor>
    <pattern>GetBoolean(#object#, #flag#)</pattern>
    <create>GetBoolean(, "")</create>
    <description>[EditorExpressionsobjecthasflag]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>flag name</simple>
      <attribute>flag</attribute>
    </control>
  </editor>

  <editor>
    <pattern>not GetBoolean(#object#, #flag#)</pattern>
    <create>not GetBoolean(, "")</create>
    <description>[EditorExpressionsobjectdoes]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>flag name</simple>
      <attribute>flag</attribute>
    </control>
  </editor>
  
  <editor>
    <pattern><![CDATA[GetInt(#object#, #counter#) #compare# #value#]]></pattern>
    <create><![CDATA[GetInt(, "") = 0]]></create>
    <description>[EditorExpressionsobjectcounter]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>counter name</simple>
      <attribute>counter</attribute>
    </control>

    <control>
      <controltype>dropdown</controltype>
      <attribute>compare</attribute>
      <validvalues type="stringlist">
        <value>=</value>
        <value>&lt;</value>
        <value>&lt;=</value>
        <value>&gt;</value>
        <value>&gt;=</value>
        <value>&lt;&gt;</value>
      </validvalues>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>number</simple>
      <simpleeditor>number</simpleeditor>
      <attribute>value</attribute>
    </control>
  </editor>

  <editor>
    <pattern>game.pov.parent = #parent#</pattern>
    <create>game.pov.parent = </create>
    <description>[EditorExpressionsplayerisin]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>parent</attribute>
    </control>
  </editor>

  <editor>
    <pattern>not game.pov.parent = #parent#</pattern>
    <create>not game.pov.parent = </create>
    <description>[EditorExpressionsplayerisnotin]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>parent</attribute>
    </control>
  </editor>

  <editor>
    <pattern>game.pov = #object#</pattern>
    <create>game.pov = </create>
    <description>[EditorExpressionsplayerobject]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>
  </editor>

  <editor>
    <pattern>IsSwitchedOn(#object#)</pattern>
    <create>IsSwitchedOn()</create>
    <description>[EditorExpressionsobjectisswitchedon]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>
  </editor>

  <editor>
    <pattern>not IsSwitchedOn(#object#)</pattern>
    <create>not IsSwitchedOn()</create>
    <description>[EditorExpressionsobjectisswitchedoff]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>
  </editor>

  <editor>
    <pattern>ListContains(ScopeVisible(), #object#)</pattern>
    <create>ListContains(ScopeVisible(), )</create>
    <description>[EditorExpressionsobjectisvisible]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>
  </editor>

  <editor>
    <pattern>not ListContains(ScopeVisible(), #object#)</pattern>
    <create>not ListContains(ScopeVisible(), )</create>
    <description>[EditorExpressionsobjectisnotvisible]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>
  </editor>
 
  <editor>
    <pattern>ListContains(ScopeReachable(), #object#)</pattern>
    <create>ListContains(ScopeReachable(), )</create>
    <description>[EditorExpressionsobjectisreachable]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>
  </editor>

  <editor>
    <pattern>not ListContains(ScopeReachable(), #object#)</pattern>
    <create>not ListContains(ScopeReachable(), )</create>
    <description>[EditorExpressionsobjectisnotreachable]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>
  </editor>

  <editor>
    <pattern>Contains (#object1#,#object2#)</pattern>
    <create>Contains (,)</create>
    <description>[EditorExpressionsobjectcontains]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>label</controltype>
      <caption>[EditorExpressionsParent]</caption>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object1</attribute>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>[EditorExpressionsContainschild]</caption>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object2</attribute>
    </control>
  </editor>

  <editor>
    <pattern>not Contains (#object1#,#object2#)</pattern>
    <create>not Contains (,)</create>
    <description>[EditorExpressionsobjectdoesnotcontain]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>label</controltype>
      <caption>[EditorExpressionsParent]</caption>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object1</attribute>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>[EditorExpressionsDoesnotcontain]</caption>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object2</attribute>
    </control>
  </editor>

  <editor>
    <pattern>#object#.isopen</pattern>
    <create>.isopen</create>
    <description>[EditorExpressionsobjectisopen]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>
  </editor>

  <editor>
    <pattern>not #object#.isopen</pattern>
    <create>not .isopen</create>
    <description>[EditorExpressionsobjectisclosed]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>
  </editor>

  <editor>
    <pattern>HasAttribute(#object#, #property#)</pattern>
    <create>HasAttribute(, "")</create>
    <description>[EditorExpressionsobjecthasattribute]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>label</controltype>
      <caption>[EditorExpressionsObject]</caption>
    </control>

    <control>
      <controltype>expression</controltype>
      <attribute>object</attribute>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>[EditorExpressionsAttribute]</caption>
    </control>

    <control>
      <controltype>expression</controltype>
      <attribute>property</attribute>
      <simple>name</simple>
    </control>
  </editor>

  <editor>
    <pattern>#object#.#property# = #value#</pattern>
    <create>. = </create>
    <description>[EditorExpressionsobjectattribute]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>label</controltype>
      <caption>[EditorExpressionsObject]</caption>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>object</simple>
      <simpleeditor>objects</simpleeditor>
      <attribute>object</attribute>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>[EditorExpressionsAttribute]</caption>
    </control>

    <control>
      <controltype>textbox</controltype>
      <attribute>property</attribute>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>[EditorExpressions]</caption>
    </control>

    <control>
      <controltype>expression</controltype>
      <attribute>value</attribute>
    </control>

  </editor>

  <editor>
    <pattern>RandomChance(#percentile#)</pattern>
    <create>RandomChance(50)</create>
    <description>[EditorExpressionsrandomchance]</description>
    <expressiontype>if</expressiontype>

    <control>
      <controltype>expression</controltype>
      <simple>percentage</simple>
      <simpleeditor>number</simpleeditor>
      <attribute>percentile</attribute>
      <minimum>0</minimum>
      <maximum>100</maximum>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>[EditorExpressionsofthetime]</caption>
    </control>
  </editor>
  
  <!-- Templates for "set" -->

  <editor>
    <pattern>NewStringList()</pattern>
    <create>NewStringList()</create>
    <description>[EditorExpressionsnewstringlist]</description>
    <expressiontype>set</expressiontype>
  </editor>

  <editor>
    <pattern>NewObjectList()</pattern>
    <create>NewObjectList()</create>
    <description>[EditorExpressionsnewobjectlist]</description>
    <expressiontype>set</expressiontype>
  </editor>

  <editor>
    <pattern>NewStringDictionary()</pattern>
    <create>NewStringDictionary()</create>
    <description>[EditorExpressionsnewstringdictionary]</description>
    <expressiontype>set</expressiontype>
  </editor>

  <editor>
    <pattern>NewObjectDictionary()</pattern>
    <create>NewObjectDictionary()</create>
    <description>[EditorExpressionsnewobjectdictionary]</description>
    <expressiontype>set</expressiontype>
  </editor>

  <editor>
    <pattern>GetRandomInt(#min#,#max#)</pattern>
    <create>GetRandomInt(1,10)</create>
    <description>[EditorExpressionsrandomnumber]</description>
    <expressiontype>set</expressiontype>

    <control>
      <controltype>label</controltype>
      <caption>[EditorExpressionsbetween]</caption>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>number</simple>
      <simpleeditor>number</simpleeditor>
      <attribute>min</attribute>
    </control>

    <control>
      <controltype>label</controltype>
      <caption>[EditorExpressionsand]</caption>
    </control>

    <control>
      <controltype>expression</controltype>
      <simple>number</simple>
      <simpleeditor>number</simpleeditor>
      <attribute>max</attribute>
    </control>

  </editor>
  
  <!-- Templates for "foreach" -->

  <editor>
    <pattern>AllObjects()</pattern>
    <create>AllObjects()</create>
    <description>[EditorExpressionsallobjects]</description>
    <expressiontype>foreach</expressiontype>
  </editor>

  <editor>
    <pattern>ScopeVisible()</pattern>
    <create>ScopeVisible()</create>
    <description>[EditorExpressionsallvisible]</description>
    <expressiontype>foreach</expressiontype>
  </editor>

  <editor>
    <pattern>ScopeInventory()</pattern>
    <create>ScopeInventory()</create>
    <description>[EditorExpressionstheinventory]</description>
    <expressiontype>foreach</expressiontype>
  </editor>
  
  <editor>
    <pattern>AllExits()</pattern>
    <create>AllExits()</create>
    <description>[EditorExpressionsallexits]</description>
    <expressiontype>foreach</expressiontype>
  </editor>

  <editor>
    <pattern>AllCommands()</pattern>
    <create>AllCommands()</create>
    <description>[EditorExpressionsallcommands]</description>
    <expressiontype>foreach</expressiontype>
  </editor>

</library>
